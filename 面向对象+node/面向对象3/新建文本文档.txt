函数是一块js代码，定义一次，可执行和调用多次，js中函数也是对象，所以函数可以像其他对象那样操作和传递，所以我们也叫js中的函数为函数对象。

function foo(x,y){
    return x + y;
}
foo(2,3);   函数名，参数列表、函数体


不同的调用方式  不同创建方法  

直接调用 foo();    
对象方法 o.method();
构造器 new foo();

创建方式

函数声明
function add(x,y){
     return a+b;
}
函数表达式
var add = function(a,b){
}
(function(){
})(); 立即执行函数表达式
return function(){
}
var add = function foo(a,b){
}命名式函数表达式

var add = new Function(a,b,"alert()")

区别：变量&函数的声明前置
console.log(add(2,3));
function add(x,y){
    return x+y
}

console.log(add(2,3));
var add = function(x,y){
    return x+y
}

函数的内部属性
     在函数内部，有两个内部属性  arguments和this
     arguments.length检测函数的参数个数。
     this
     this是js语言的一个关键字，它代表函数运行时，自动生成一个内部对象，随着函数使用场合的不同，this值会发生改变，但是有个总的原则，那就是this指的是，调用函数时的那个对象。
     注意：this跟函数在哪里定义没有半毛钱关系，函数在哪里调用才决定了this到底引用的是啥。
	1、在函数外部使用this，this指的就是window对象。
	2、函数内部调用
	3、用new来调用
	4、作为某个对象的方法调用
	5、事件监听函数
函数的属性和方法
    每个函数都包含两个属性：length 和 prototype 
    每个函数都包含两个非继承而来的方法：apply()和call()
	length:当前函数希望接受的命名参数的个数。
	apply()和call():
	     这两个方法都是在特定的作用域中调用函数，实际上等于设置函数体内this对象的值
	     apply接受两个参数，一个是函数运行的作用域，一个是参数数组（可以是数组实例也可以是arguments）
	     call方法第一个参数没有变化，其余的参数都是传递参数，传递给函数的参数需要逐个列举出来。
	    apply和call通常用来扩充函数作用域而非传递参数

变量和作用域
      基本类型和引用类型
      基本类型有：undefined、null、boolean、number、string
	这些类型在内存中占有固定大小的空间，我们按值来访问。
      引用类型：对象、数组、函数
	占有的内存空间不固定，内存大小是固定的，获取的是数据的内存地址。
     函数的参数也是按值来传递的。

执行环境和作用域
     执行环境定义了变量或者函数有权访问其他数据
     全局执行环境是最外围的执行环境。（window对象）
     变量没在函数中声明或者没有带var就是全局变量，函数内声明并且带var就是局部变量
     内部环境可以访问全局变量。外部环境不能访问内部环境中的任何变量
     在变量的查询中，访问局部变量要比全局变量快。


js面向对象
     1、对象是什么，什么叫面向对象。
	物以类聚、人以群分 
      类。特征、规则
      人/物   实例
     2、类和实例的关系
     类：每个对象都由类定义  实例：程序使用类创建对象时，生成的对象叫做类的实例，这个过程叫实例化。
    3、js对象的定义：可以把对象理解为属性集合，每个属性存放一个原始值、对象或者函数。
    4、面向对象：可以简单的理解为，不必去了解对象的内部结构，就可以去使用它，（手机打电话）

创建对象的方法
    1、基本模式
    2、工厂模式
    3、构造函数模式
    4、prototype